虚拟机软件:  vmware   virtualBox 

在主机上再虚拟出一个硬件环境
可以让用户在已有的主机上,传递、

远程连接软件:  XSHell
软件编辑器   notepad++

boot ： 放的系统的引导文件
etc  ：  放的系统的配置文件
lib ：   放的系统的一些库文件
lib64:   也是库文件。
bin:     命令文件
dev：    设备文件
mnt  media   外部的挂载目录
opt  :  放的第三方的数据
usr  ： 大佬第三方库

var ： 日志文件
sys:   系统文件
tmp:   临时文件。



基础命令: 
    linux一切接文件
	文件类型不以后缀名来区分,而是详细信息的第一个字符
    目录:  文件夹
	ls  浏览目录
	ls   -l bin/test/
	-普通文件
	d 目录文件
	p开头的是管道文件
	c开头的是字符设备文件   (键盘)
	l 符号连接文件   ( 类似于快捷方式)
    b 块设备文件
    s 套接字文件
	
Linux命令的使用:
  命名名称  [操作选项]  [操作对象]
  
基本命令:  
  目录命令: 
  普通文件命令:
  匹配查找命令:
  系统资源命令:
  时间命令: 
  
  
  
目录命令: 

  ls    浏览目录内容
    -l  查看文件的详细信息./
    -a   查看所有文件(包括隐藏文件) 
	   linux下以.开头的文件都是默认不显示的
	man  查看手册.
	
	ifconfig  查看linux的网卡信息.
	
pwd  查看当前所在路径.	
	 /home/test 绝对路径
	 在每一个目录下都会有两个目录
	  .  目录自身
	  ..  自身的上一层路径.

linux下的目录结构: 
	 交换分区,   文件系统分区.
	
mkdir  创建目录   
     -p    递归多层级创建目录,哪层不存在创建哪层.
	 mkdir -p  abc/bcd/def
	 
rmdir    删除空目录
     -p    递归多层级删除空目录
	 
	
rm   删除普通文件
     -r  递归删除目录下所有文件包括自身.  
     -f  忽略提示信息,直接进行操作
	 -rf  

cp   (默认针对普通文件) 默认拷贝到一个文件到指定位置
    -r   递贝目录下所有文件包括自身.	 
	-f  忽略提示信息,直接进行操作
	cp  ./test/  workspace/
mv   将一个文件或目录移动到指定位置
     mv  workspace/test  ./
	 -i 增加提升信息.

cd   改变当前所在路径为指定路径
    进入指定目录	
     ~ 快速返回当前用户家目录.
     -   返回上次所在路径.


文件命令:
    touch  刷新文件时间属性 文件不存在则创建空的新文件,
         touch abc.txt
    	-d 使用指定的时间刷新文件的时间属性,
		touch -d "2018-09-20 10:20:10"  passwd
		
	cat  将文件内容打印到终端显示中
		-n   加入行号.
	    cat filename   
	  
	tac  按行逆序打印文件内容
	
	more   按页显示文件内容
	     回车   向下按行滚动
		 空格    向下按页滚动.
		 向下   f  
		 向上   bcd/def 
		 查看是哪个文件     :f
		 q 退出
    
	less     也是按页显示文件内容
	    f/b   上下翻页
		j/k    上下按行滚动
		q    退出
		/string   向下匹配string 字符串
		?string   向上匹配string字符串
	     按n匹配下一个
	
	head    默认显示文件的前10行内容
	  -n n  显示文件的前n行内容
	  head -n 1 passwd
	  
	  
	tail  默认显示文件的末尾10行内容
	    -n n  显示文件的末尾n行内容
		-f   一直动态刷新文件末尾内容
		
        tail  -n 1 passwd
		
	  
	  
	如何打印文件的第11行内容
	   head -n 11   passwd  | tail  -n 1 
	  |   管道符
         连接两个命令,将前面命令的输出结果交给后面的命令
		 
	重定向符号:
	标准输入      标准输出     标准错误
	键盘          显示器       显示器
	输出重定向:将要写入输出的数据,改变数据流向,写入到另一个指定的文件
	>>  追加重定向  : 将数据追加到源文件末尾
    >   清空重定向 :  清空文件原有内容,写入新数据 
   
    2>> 标准错误重定向
	ls 1>a.txt 2>&1
	ls 2>&1  1>a.txt
    <    标准输入重定向.


    压缩命令:
	  zip/unzip   zip格式的压缩/解压缩.
	    zip   a.zip  abc.txt  a.txt

      tar    文件打包
	      -c 打包 
		  -x 解包
		  -v 显示详细的打包信息
		  -f  指定包名'
	      -z   打包同时进行gzip格式压缩/解压缩
		  -j   打包同时进行bzip2格式压缩/解压缩
	      -czvf  a.tar.gz   abc.txt  a.txt
	      -cvjf a.tar.bz2  abc.txt b.txt
	         
	       tar -xvf a.tar.gz
		   
su 切换用户.	 
	 
	 
时间命令:
	cal   查看日历  
       -3  查看3个月
       -y   查看全年
       -j   以day-of-year 形式显示日历

	bc 计算器
	
	
	date   查看或设置系统时间
	    -s  设置时间  data -s "2018-10-10 12:00:30"
	  以指定格式查看时间 date +'%Y-%m-%d %H:%M:%S"
	   显示时间戳     date +'%s'
	
	
匹配查找命令 :
    grep    在指定文件中匹配包含有指定字符串的行
	    -n   加上行号
		-i   忽略大小写进行匹配
		-v   匹配不包含指定字符串的行(反向匹配)
		-R   递归对指定目录下的所有文件进行字符串匹配
		grep -r  gcc ./
	调研正则表达式
		
    find     在指定目录下查找文件
          -name   通过文件名查找文件
		  -type    通过文件类型查找文件
		       f  d p   l   s   b   c 
		  -size   + / - n [unit}
		     +1k   -1M
			  c    b k  M G
			 c=1char 
			 b=512c
			 k=1024c		 
		  
		  -time (atime ctime mtime amin  cmin mmin)
		      -mtime +1 修改时间在一天以前得文件
			  -mmin -1   修改时间在一分钟以内的文件
			  
		  		  
		    find ./   -type  f
		    find ./  -name '*ss*'
	
系统资源命令:
   top  查看cpu资源使用情况
   fdisk 查看磁盘
   df   查看磁盘使用情况
   free  查看内存得使用情况.
   df 和du得区别   df 查看磁盘得使用情况, 
       du 查看 文件占用空间大小


halt  关机  需要root用户
     shutdown -h  now 立即关机
	 
reboot   重启

ctrl +c 中断当前命令操作
teb键 自动补全操作
 
ctrl+d   表示键盘输入结束



shell命令及运行原理:
  shell是什么?   命令行解释器   ---解释用户输入   
      用户为什么不能直接使用内核:
	    解释用户功能=--- 解释操作系统执行结果.
          对操作系统内核进行一层保护
		  

  shell命令是什么?  
       大佬们对操作系统常用操作得封装,一个个程序
	 用户输入ls字符串,shell捕捉用户输入,得到ls字符串
认为用户想要浏览目录,执行shell命令ls这个程序,完成
浏览目录得功能


权限:
   linux下得用户分类, 管理员 --root   普通用户

   useradd  添加用户     passwd  修改密码
   
   系统级参数得修改就是需要root用户权限了
   
文件权限:
     文件操作分用户.
	     文件所有者    文件所属组   其它用户
		 u             g              o
      对用户分操作
       	  文件的可读    可写         可执行,
         目录   可浏览  可创建/删除  可 进入
                 r        w            x
				 
	rwx  rwx	r-x  Tools 
   所有者可读可写可执行 ,	所属组成员可读可写可执行
   其它用户可读可执行,但是不具备修改权限.
   
   
   在操作系统中使用二进制比特位存储权限信息
   111 111 101 
   7   7    5 
   
   默认创建一个文件是 664
   
   权限 命令   
	 umask  文件默认的创建权限掩码
	   最终权限 = 给定权限  &  (~掩码)
	        普通文件还要再减去可执行权限
     chmod  修改文件权限
         777   通过八进制数字修改
		     chmod  777 file
			
			a/u/g/o  +/-  r/w/x
			chmod a+x file
			chmod u-x file
			
     沾滞位权限:
	    其它用户在设置沾滞位权限的目录下可以创建
		文件,也可以删除自己的文件,但是不能删除别人的
		文件
		
		
		这个目录下的文件,目录所有者/root可以删除
	    chmod    +t    file  
   
         沾滞位主要针对的是其它用户在目录下的操作
		 
	 
          
   
   
第二节课:
  常用工具.
     yum:  软件包管理工具
        查看软件包    yum list    yum list |grep lrzsz
        安装软件包    yum install
		    lrzsz.x86_64
			yum install lrzsz
			yum install gcc 
			
        移除软件包   yum remove  
		    lrzse    yum  remove lrzsz
			
	vim编辑器:
        因为vim中默认不能使用鼠标,因此为了完成能够
插入,删除,复制,粘贴各个操作,vim将操作分为很多模式
一共12种模式.常用的有3种,:  
    插入模式: 插入数据	  
	普通模式: 完成命令操作(移动光标,复制,粘贴,删除,撤销)
    底行模式: 保存文件,退出编辑
	
   vim filename ---> 普通模式  --->插入模式 
   ------>Esc ------>
   
   模式切换:
     普通模式---> 插入模式   
	 i  从光标当前位置开始插入,   I 光标移动到行首,开始插入
	 a  光标移动到下一个字符开始插入 A 光标移动到行尾开始插入
	 o  在光标所在行下方添加新行,开始插入 
	 O  在光标所在行上方添加新行,开始插入.
	 
	 
	 插入模式--->普通模式    esc
	 
	 普通模式---->底行模式 
	 :   / ? 
	 查找多少行 ：90       / string 查找字符。 
	 底行模式---->普通模式 
	 esc
	
	 底行模式下的操作:
	     :w :wq :q  :q!   保存退出查找.
	/string   ?string 字符串查找	    
	
	
	普通模式下的操作:
	    光标移动:   hjkl   左 下 上 右   
          		w/b 按单词移动光标
				ctrl+f/ ctrl+b  下/上翻页
				gg/G  文档的头尾切换.
				
		复制:    
		    yy复制光标所在行  
			n yy    从光标所在行开始向下复制n行数据 
		粘贴:     
		    p是粘贴   向光标下方粘贴
			P         向光标所在行上方粘贴.
			
(剪切就是删除)删除:    剪切
              dd  删除光标所在行,
			  ndd 从光标所在行开始向下复制n行数据
              x  删除光标所在字符.
              dw  删除单词.			  
			  D   删除光标后边的数据, (按行走)
		撤销:       
		     u  撤销
		恢复撤消:
		     ctrl+r  
		

gcc: 编译器;
   	gcc将高级语言 c语言编译成机器可以识别的语言 ,
 
    预处理:   去掉注释,展开代码        
	编译:     语法语义纠错,将c语言解释成为汇编代码
	汇编:    将汇编代码解释成为机器语言.
	链接:    链接库文件中的代码.
	   静态链接:  链接静态库 将库中代码拷贝到程序中
	       程序比较大,但是不需要依赖静态库的存在
		  静态库如果多个程序使用了相同的静态库,运行时
          程序被加载到内存中,会出现冗余代码
		  
		   
(共享库)   动态链接:  链接动态库.  记录函数位置符号信息,程序比较
	       小,但是运行时需要依赖动态库的纯在.
	        而动态库,在内存中共享同一份动态库代码
    	
	  gcc默认链接方式是动态链接.
	
	gcc常用选项
	   -E  只进行预处理    生成.i
	   -S  只进行编译     生成.s
	   -c  自进行汇编     生成.o
	   -o  用于指定生成的文件名称.
	   -static  使用静态链接.
	 !gcc  执行最近一次的执行编译命令.
   gcc -E main.c -o app.
   
gdb 调试器:
    
	  gdb加载程序的时候如果有程序运行参数,不能加载
	  的时候给与,应该开始调试的时候给与


     --调试程序的运行过程--分析程序的错误原因,以及
	 错误位置
    调试程序的运行过程,--调试bug
    0.向程序中加入调试符号信息,(程序调试的前提)
	    gcc默认生成是relese发布版程序,可执行程序中
		没有加入调试符号信息.  无法实现逐步调试
		
		gcc -g  生成debug版可执行程序
	 
	 bt    查看程序堆栈
	 
	1.加载程序
	   gdb ./main
	   
	2.开始调试
       run   直接运行程序.
       start  开始逐步调试
    3.常见操作:    
	    list    查看代码	    list  file:line
	    n   下一步  (不跟踪进入函数,直接将函数运行完毕)
	    s   下一步 (跟踪进入函数)
	    until  直接运行到指定行
        until file:line
		
    断点相关:
        break		
        b 打断点	 
        b   file:line 
	    break function-name  给函数打断点
	    info  break  查看断点信息
		   
	    print   查看变量内容
        print var     (p var)
						  
		continue 继续运行 (运行到下一个断点)
			
		delete  删除断点,   (默认删除所有的断点)
	    delete id   删除指定的断点.
			  
	    watch i  变量监控   当变量内容改变时,停下来
		   watch  var 
		   
	    
    5.查看调用栈信息.
        backtrace   查看函数调用栈信息,-快速定位程序
		崩溃位置.
	    bt
		
	  q退出
  	  
    
make/Makefile : 项目自动化构建工具
    Makefile : 普通文本文件,但是不普通的是makefile中记录的是项目的构建流程规则.
        
    make :一个程序,---makefile解释器  解释makefile中的项目构建规则,完成项目的构建,
           在当前目录下敲击make命令,make程序到当前目录找makefile文件,逐行解释
    makefil文件名称大小写不敏感
	
	
    makefile基本编写规则:
        目标对象 :[依赖对象]
        tab	 要执行的命令
make的解释规则
  	make打开makefile 文件后，找寻第一个目标对象名称
      若没有找到：认为没有要生成的对象，报错退出
　　　若找到了：　判断目标对象文件是否存在：
　　　　　目标对象文件若存在：判断是否有依赖对象名称
　　　　　　　　若没有依赖对象名称：认为目标对象已经生成，不需要重新执行命令生成。
　　　　　　　　若有依赖对象名称；　判断依赖对象文件是否存在，
　　　　　　　　　　若存在：　判断目标对象文件与依赖文件对象的时间关系　　　　　　　　　　　　　　
　　　　　　　　　　若不存在：再判断ｍａｋｅｆｉｌｅ　继续向下查找依赖对象的生成规则，
　　　　　　　　　　　　　　依赖对象在下一条规则中作为目标对象被生成，进而生成最终的第一个目标对象后退出。·
　　　　　目标对象文件不存在：	  
	　　　　　　　则直接执行命令。
	
	
（疑问）！！！！	 
makefile 预定义变量： $@ $<  $^
     $@: 目标对象
	 $^：所有的依赖对象
	 $<：依赖对象中的第一个
	 
	 伪对象： 不管对象是否最新，是否 存在，每次都要从新生成
	 
	声明伪对象  .PHONY: clean
	  
	makefile中变量赋值方式
	   =    :=   ?=  +=


   
	 
	 
git :项目版本管理工具
    git  svn    	 
	 
	 
	git基本操作：
	    下载服务器上的代码
		 修改代码后，本地提交（本地管理）
		 讲本地的修改提交到服务器。
下载服务器上的代码		  
git clone https://github.com/shareleb/leb.git	  
		  
修改代码后，本地提交（本地管理）		  
	git add new_file
    git commit -m "test"	
讲本地的修改提交到服务器。	
	git  push  origin master
	master 是git代码管理的主分支。
	
	
	（缓冲区 fflush   疑问）？？
	
进度条程序：
    缓冲区：
	   printf（“hello\n”）  --->buffer---->file
	   
printf并不会直接将数据写入终端文件，而是将数据先写到一块缓冲区（标准输出缓冲区，） ----目的是为了提高写入效率 （将碎片化得数据集中写入到文件）等到手动刷新缓冲区
或者缓冲区内容写满的时候，才会将数据写入文件
 printf中的\n具有刷新缓冲区（将数据写入文件）的作用，当然主要作用还是换行，
  printf的\r是回车作用----将输入起始位置移动到行首
	
	 
	 
	
	
	
 *********************进程	********************
 系统编程阶段 ： 
     进程概念
	 进程控制
	 基础IO
	 进程间通信
	 进程信号
	 多线程
	 
	 所有的硬件都是围绕存储器工作的。
	 硬件结构决定软件行为。
	 qq发送文件。
	 
	 
操作系统：
   操作系统的目的：让计算机更好用
   操作系统的定位：一款搞管理的软件-管理软硬件资源
        提供良好的执行环境。
    如何搞管理： 先描述，再组织。
	  
	 管理者并不需要直接与被管理者交互进行管理，而是通过对被管理者进行描述，并且将描述信息得当的组织起来进行管理，
	 
	 应用程序
	 shell命令   库lib
	 系统调用接口
	 操作系统
	 驱动程序。
	 硬件 
	 库函数与系统调用接口的关系：库函数对系统调用接口的一层封装，是上下级的调用关系。
	 
	 
	 
进程概念：
    进程是什么：进程就是运行起来的程序,  用户层面
    从操作系统的层面理解进程 
        程序运行需要将代码数据加载到内存中, 
        操作系统上运行了很多的程序,操作系统就必须去管理这些程序的运行,先描述再组织进行管理
  
    在操作系统的层面进程就是操作系统对一个运行的程序的描述
	
	  校长眼里看到同学们的档案就仿佛看到了真人,通过档案来管理
	  来管理学生.
	  在操作系统眼里看到了对运行程序的描述就仿佛看到了进程.通过描述来管理学生.
	  
	  这个描述信息  ---叫 PCB (进程控制块)  
	     Linux 下是 struct task_struct 结构体
		   
	   
      CPU分时机制 : 对程序运行处理进行切换调度处理
   	  时间片:  CPU在每个程序上运行的这段时间.
	  
	  PCB 中的描述信息:
	     内存指针,
         程序计数器
         上下文数据
        
 标识符PID
		 进程状态
         进程的优先级
		 记账信息      
		 IO信息
		 
		 
    先把sudo用户设置讲了：   修改/etc/sudoers文件 大概在91行
	leb ALL=(ALL)  ALL
	

	冯诺依曼结构： 现代计算机硬件体系结构
	
	五大硬件： 输入 输出  存储器 运算器  控制器
	所有的硬件都是围绕存储器工作的。
	硬件结构决定软件行为。
	
	
	操作系统： 
	   目的:让计算机更好用
	   概念： 一款搞管理的软件， 管理计算机上的软硬件资源。
	   管理： 先描述，再组织。
	   
	   cpu的分时机制： 轮流调度运行一个个的程序，目的就是为了
	   让所有的程序都能同时推进。
	   
进程查看：
    ps -ef   
	ps -aux
	/proc/
	
	程序中得到本进程的ID     pid_t getpid(void) 
   	
	
进程创建：
      pid_t fork(void);
             通过复制父进程来创建子进程，
	           
    创建子进程的意义何在： 
        分摊任务处理压力
        让子进程完成其他任务------背锅
        
    如何让子进程完成其他任务：  分辨出父子进程	
	  返回值：
	 对于父进程来说，返回的是子进程的pid；创建子进程失败返回-1
	 对于子进程来说，返回的是0（成功）；出错为-1      
	 
	 用户通过fork的返回值不同对父子进程流程进行分流
	 
	 复制：  操作系统通过复制父进程，创建子进程，因此父子进程数据独有
	 代码共享

		 
	 
	
进程状态：         状态带+ 号代表是前台进程。
    运行  就绪   阻塞   
	
	Linux 下进程的状态：‘
	    运行R：      运行 就绪
		可中断休眠S:    能够被简单的操作唤醒，
		不可中断休眠D:       
		停止T:   停止的进程用kill杀不掉。
		      kill -18 继续运行 
			  kill -9 强制杀死。
		僵死Z     
僵尸进程： 
		    处于僵死状态的进程  ----资源泄露
		僵尸进程产生的原因：
		     子进程先于父进程退出，因为要保留退出原因，因此
			 操作系统不能直接释放所有资源，通知父进程获取退
			 出原因，允许操作系统释放资源，但是父进程没有关注
			 这个通知，导致子进程退出后一直无法释放所有资源。
			 处于僵死状态，成为僵尸进程。
	    僵尸进程的危害：  资源泄露
		 
		 如何避免：  进程等待。
		 
		处理方式：  退出父进程
		   避免产生僵尸进程， 进程等待
		
孤儿进程：
	父进程先于子进程退出，子进程成为孤儿进程。运行在后台。
	父进程成为1号进程。

守护进程/精灵进程： 
    特殊的孤儿进程。 
	   脱离终端，脱离会话      一般以d为结尾


	   
环境变量：
    存储系统运行环境参数的变量。
	env （只能查找环境变量）   set（还包括普通变量）    查看环境变量。
	常见环境变量 ：  HOME  PWD  SHELL  PATH
   
     设置环境变量 ：   export 设置环境变量  export MYPATH  PATH=$PATH:/home/test/workspace/process
MYPATH=/home/test/workspace/process
	  
	
    echo  $PATH  查看PATH
	
		
	环境变量特性：  全局特性（父子进程之间的继承关系，父进程设置了子进程的环境变量，）  
	   shell终端下所运行的进程能够获取所有的环境变量。但是获取不到普通变量。也获取不到其他shell终端的环境变量。	  
	 
	 
	环境变量在代码中的获取： 
	     char* getenv(char * n）  通过环境变量名称，获取
		     环境变量内容。
	       非环境变量，该函数不能获取。
		   
		  putenv setenv  设置环境变量在代码中
		   
		   
		   
	    main函数的第三个参数   
		   int main(int argc,char*argv[],char * env[])
		extern char **   environ     声明全局变量。
	 
	参数环境变量     unset    删除环境变量。
	   

环境变量的使用场景：
     通常是父进程通过给子进程设置环境变量来达到向子进程传递数据的功能
	 
	
程序地址空间: 
    百度网盘的例子：
    进程之间数据独有：
	
    内存地址：  就是内存区域的一个编号，

	虚拟地址---虚拟地址空间  （  struct mm_struct ）
	
	 { 
	  ulong  mem_size   //内存大小
	  ulong  code_start
	  ulong  code_end
	   
	  
	 }
		
     .每个程序都需要连续的内存地址。
	 
	 
		
		
		
	虚拟地址如何存储数据。
	虚拟地址空间又是什么？
	   我们所看到的程序地址空间实际上是一个虚拟地址
	   空间，实际上是操作系统通过mm_struct这个结构体
	   为进程描述的一个空间，因此有时候也称作内存描述
	   符。
	   
	为什么要使用虚拟地址空间：
       进程再通过访问虚拟地址进而获取变量数据，最终
        还是要去访问物理内存，因为数据是存储在
         物理内存中的，
    在虚拟地址和物理地址之间通过页表进行地址映射。
    转换得到物理地址，进而访问物理内存区域	

    通过映射后，物理地址就不一定连续了，通过这种
	映射转换的方式实现数据的离散存储提高内存的利用率
	
	页表不但记录了虚拟地址和物理地址的映射关系，而且
	 还记录了这块地址的属性。实现内存访问控制。
	 
	 
创建子进程都发生了什么？ 
   写时拷贝技术：  操作系统通过复制父进程创建子进程，
      子进程初始时与父进程指向同一块物理内存区域，当
	  内存数据发生改变时，会为子进程重新开辟内存，
	  更新页表。
	  
进程独立性：
    进程应该具有独立性，因为独立才更加稳定


虚拟地址空间和页表有什么用：
       提高内存利用率，增加内存访问控制，保持进程
	   独立性。



页表是如何将虚拟地址转换为物理地址:
    分段式内存管理：
	    内存地址的构成： 
		    段号（  段起始地址）+段内偏移
    段表： ----有很多的段表项
	             （物理段的起始地址）
				 
			
   	

    分页式内存管理：
	    内存地址的构成： 页号 +页内偏移
		
		页表---有很多页表项。
    
		
    段页内存管理
	   段号+ 段内页号+页内偏移
	   
分段式： 通过地址中的段号去段表中找到段表项，通过段表
项中的物理段起始地址加上地址中的段内偏移获取物理地址


分页式： 通过地址中的页号去页表中找到页表项，通过页表
项中的物理页号加上页内偏移获取物理地址，



段页式：  通过段号在段表中找到段表项，通过段表项中的
   段内页表地址找到段内页表，通过地址中的段内页号，
   在段内页表中找到页表项，通过页表项中物理页号与业内
   偏移物理地址。
	


内存置换算法：
    内存只有4G，但是想要处理五G的数据，怎么办？
	 swap分区也叫交换内存，内存不够的时候，将内存中
	 数据置换到交换分区中，腾出内存处理数据。
	 FIFO   先进先出
	 LFU    最近最少（频率)未使用
	 LRU    最近最久未使用。

	
             


图：：：：：：

    内核空间        0x ff ff ff ffshu
	
	程序运行参数  环境变量。
    	
	栈
	                 用户空
	
	共享区
	
	
	堆
	

	未初始化全局
	
	初始化全局
	
	代码段
					0x 00 00 00 00 
	
	
	

	
进程控制：

	进程创建： 
        fork ---通过复制调用进程创建一个新的子进程
       （复制pcb-代码共享，数据独有）--运行位置也一样
		（程序计数器）
		返回值： 父进程返回子进程的pid，子进程返回0
		写时拷贝技术；
		
		
		vfork---创建子进程，共用同一个虚拟地址空间。
		    用栈为了防止调混乱，因此父进程调用vfork	会阻塞，阻sdf进程程序替换，创建自己的地址空间，
	
	
	fork/vfork在内核中创建进程都是调用clone函数实现pcb创建并拷贝数据的，
	
	
	vfork已经被淘汰掉了，因为vfork的存在意义就是创建
	子进程的效率更高，但是fork实通过写时拷贝技术实现
	了进程创建之后，被淘汰了
	

	
进程终止：	进程退出，
	退出场景：
		正常退出： 结果符合预期、结果不符合预期
		异常退出：  常见的程序崩溃。
		
		
		
	如何退出：
		main函数里的return。main函数中的return才退出进程     退出前刷新缓冲区
		     return会把虚拟地址空间也释放掉
			 
		
		exit      任意位置调用都是退出进程
			       库函数
		            退出前刷新缓冲区。
		            只会释放pcb
					
					
		
		void _exit(int）  系统调用接口
				任意位置调用都是退出进程
				不刷新缓冲区。缓冲区的数据被丢弃
				
				
	    库函数和系统调用接口关系：
			上下级的封装关系。
			
	
	int atexit(void（*function）（void）；
	     告诉操作系统进程退出的时候执行一下function
		 函数。
		 
		 
		 
		 
进程等待：
    等待子进程的状态改变，（等待子进程退出）--获取
	子进程的退出返回值。
	 --获取子进程返回值，避免僵尸进程。
    为什么要等待子进程退出：因为子进程退出时为了保存退出原因，因此操作系统不能释放子进程全部资源，因此通知父进程获取子进程退出返回值，允许释放资源，
	但是通常这个操作的通知是静音的，导致父进程没有关注到子进程的退出，因此子进程成为僵尸进程。
		
	
	若父进程获取了子进程的返回值，僵尸子进程将没有存在的意义，就会被释放资源，、
	
	因为不知道子进程何时退出，因此只能创建之后一直等
	着子进程退出。
	
	如何等待：
	    pid_t wait（int* status）
pid_t  waitpid(pid_t pid，int*status，int options）
	
	wait接口功能是一直等待任意一个子进程退出，子进程退出后
	获取到进程返回值，放到传入的参数statu中
	如果一直没有子进程退出，wait函数将一直阻塞。
	
阻塞：
	为了完成一个功能发起调用，当前若不具备完成条件，
	等待直到条件具备完成功能后返回

非阻塞：
	为了完成一个功能发起调用，当前若不具备完成条件，
	则立即报错返回。
	
      
	 
	非阻塞轮询操作。 
	 
	   阻塞等待任意一个子进程退出，获取返回值。
             wait(NULL);
   pid_t waitpid(pid_t pid ,int *status,int options);
     阻塞等待任意一个子进程或者指定的子进程退出,
    pid=-1   :等待任意一个子进程， pid>0:等待指定子进程。
     option  选项标志，   WNOHANG
    把waitpid函数设置为非阻塞。   0为默认阻塞。
 44 //     返回值：如果成功，则返回状态改变的pid， 如果设置了WNOHANG
 45 //    没有子进程退出则立即报错返回0 ，  否者失败错误返回-1
	
error 是一个全局变量，存储每次系通调用出现的错误原因
         编号
 strerror 通过错误编号获取字符串错误原因。
 perror  直接打印上一个系统调用错误原因。
	
	
	
	
	
	
	
	         上面那个是函数的返回值，下面是：
	一个进程退出返回值： 
	   status中低16位中的高8位存储子进程退出返回值。
	           （exit code）
			 
        低16位中的低八位
		   低八位中高1位存储的core  dump 标志
		
	核心存储：程序异常退出时，保存程序的运行信息。  (便于调试)
			  便于时候调试，默认关闭。
			  
	  
	    低八位的后7位：  异常退出信号值
		   异常退出：  
				    
	        若低8位中低7位是0，表示没有异常退出
			信号，表示程序正常退出；
			否者表示程序异常退出，返回值将不具有意义
			
	
	获取低7位  ：  statu  & 0x7f  
	
	获取低16位中的高8位
	   (  statu>>8 ) & 0xff
	   
	
	
进程控制：  
    进程创建-》 进程终止-》 进等待-》程序替代
  进程创建：
		fork（）： 复制 返回值
		创建一个子进程的流程： 写实拷贝技术
		vfork（） 与父进程同用一个虚拟地址空间，阻塞
		父进程到子进程eixt退出或程序替换从新开辟新的
		空间以及虚拟地址空间页表
		fork 和vfork  都是通过内核中的clone函数实现
		pcb创建拷贝的。
	
 进程终止：  进程的退出
    进程的退出的场景： 正常退出，结果符合预期 
	   正常退出 ， 结果不符合预期，  
	   结果不符合预期， 异常退出
	  
	 如何退出:
	    main函数中的return； exit（int ret_val)刷新
		_exit（int retval）不刷新
		

 进程等待：
      等待子进程的退出； 获取退出子进程的返回值，
	    避免子进程成为僵尸进程，
	
	如何等待进程退出：  wait（int*statu）
	   wait_pid(int pid,int *statu,int opt)
	   
	   wait/wait_pid 两个函数都是默认的阻塞函数，
	   阻塞等待任意子进程的退出
	   
	   阻塞： 
			为了完成一个功能发起调用，当前若不具备完成条件，
	等待直到条件具备完成功能后返回

非阻塞：
	为了完成一个功能发起调用，当前若不具备完成条件，
	则立即报错返回。
		
	
	wait等待任意一个子进程退出，
	waitpid  可以等待指定的一个子进程退出，并且
	可以设置为非阻塞。
	
获取子进程退出返回值:
	statu中，高16位没有使用，其中低16位中，高8位存储
    子进程退出返回值，低8位中高一位中存储core dump
    标志，    低七位中存储异常退出信号值。
    低7位中异常退出信号值若为0，则表示程序正常退出
    否则程序异常退出，退出的返回值比具备判断意义

		
	
	
	
程序替换：    替换一个进程正在运行的程序， 
	重新加载一个新的程序到物理内存中，对一个进程
	的代码段通过页表在物理内存中的地址进行一个修改，
	修改映射关系，让程序的代码段经过页表转换后，指向
	新的程序位置。
	
	
	让一个进程pcb通过页表转换映射到物理内存上另一个
	程序地址；进程将运行另一个程序，以前的代码和数据	都失效了，因此需要重新初始化页表以及虚拟地址空间中的代码段，数据段。
	
	
	
如何进行程序替换： exec函数族。   
 int execl(const char * path,const char * argv,...)
  使用path这个路径的程序，替换当前程序要运行的程序。
  让当前进程运行ls这个程序的功能 
  后边的arg 以及 。。。 都是这个程序的运行参数  
	
	
	
	
extern char **environ;


int execl(const char *path, const char *arg, ...);
int execlp(const char *file, const char *arg, ...);


int execle(const char *path, const char *arg,
                  ..., char * const envp[]);
int execv(const char *path, char *const argv[]); int execvp(const char *file, char *const argv[]);
int execvpe(const char *file, char *const argv[],
                   char *const envp[]);
	
	
	
带p和不带p的区别： 加载的程序是否需要确定的给出所在
路径。	
	
v和l的区别，程序的运行参数是函数的参数平铺，或者直接
组织成为字符串指针数组 给与
 
带e与不带e的区别：
   要运行的程序是否需要从新自定义环境变量。
       
	   
	   
	   
自主实现minshell  ： 简单的命令行解释器	
	[leb@local]    
       ||
	   创建子进程，程序替换。
	   子进程就玩成了，对应程序功能，

	
	
	
	scanf("%[^\n]%*c",tmp]；获取一个连续的字符串
	
	%[^\n]  ：从标准输入缓冲区取数据直到遇到\n截止
	
	%*c  将缓冲区中剩下的\n取出来，否则造成死循环

	
	
	
	
	
	
	
	
	
	
	
	
     


	
